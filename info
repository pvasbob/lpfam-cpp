HFBTHO.h:    // int npr_INI[3], kindhfb_INI;
HFBTHO.h:    static int kindhfb_INI;
HFBTHO.h:    // int lfile, lin, lout, lwin, lwou, lplo, lwel, lres, icstr, icou, ncut, iLST1, iLST, maxi, iiter, inin, nzm, nrm, icacou, iqrpa, icacoupj, icahartree, nlm, nb, nt, n00, itass, kindhfb, iappend, iError_in_HO, iError_in_THO, ierest;
HFBTHO.h:    static int kindhfb;
HFBTHO.h:    // std::vector<std::vector<double>> rk, ak, hh0, de0, qh, qh1, ek, dk, vk, vk1, uk, hfb1, vkmax;
HFBTHO.h:    static std::vector<std::vector<double>> hfb1;
HFBTHO.h:    // int nhfbqx, nb2x, nhfbx, nkx, nzrlx, iqqmax;
HFBTHO.h:    static int nhfbqx;
HFBTHO.h:    static int nhfbx;
HFBTHO.h:    // double rehfbcan, ehfb, retotpj, depnp, iproj, npr1pj, npr2pj;
HFBTHO.h:    static double rehfbcan;
HFBTHO.h:    static double ehfb;
HFBTHO.h:    //! hfbdiagonal
HFBTHO.h:    // std::vector<double> erhfb, drhfb, erhfb1, drhfb1, evvk, evvkcan, zhfb;
HFBTHO.h:    static std::vector<double> erhfb;
HFBTHO.h:    static std::vector<double> drhfb;
HFBTHO.h:    static std::vector<double> erhfb1;
HFBTHO.h:    static std::vector<double> drhfb1;
HFBTHO.h:    static std::vector<double> zhfb;
HFBTHO.h:    // std::vector<std::vector<double>> hfb, hfbcan;
HFBTHO.h:    // static std::vector<std::vector<double>> hfb;
HFBTHO.h:    static std::vector<double> hfb;
HFBTHO.h:    static std::vector<std::vector<double>> hfbcan;
HFBTHO.h:    static std::vector<std::vector<double>> hfbcan;
HFBTHO.cpp:// int npr_INI[3], kindhfb_INI;
HFBTHO.cpp:int HFBTHO::kindhfb_INI;
HFBTHO.cpp:// int lfile, lin, lout, lwin, lwou, lplo, lwel, lres, icstr, icou, ncut, iLST1, iLST, maxi, iiter, inin, nzm, nrm, icacou, iqrpa, icacoupj, icahartree, nlm, nb, nt, n00, itass, kindhfb, iappend, iError_in_HO, iError_in_THO, ierest;
HFBTHO.cpp:int HFBTHO::kindhfb;
HFBTHO.cpp:// std::vector<std::vector<double>> rk, ak, hh0, de0, qh, qh1, ek, dk, vk, vk1, uk, hfb1, vkmax;
HFBTHO.cpp:std::vector<std::vector<double>> HFBTHO::hfb1;
HFBTHO.cpp:// int nhfbqx, nb2x, nhfbx, nkx, nzrlx, iqqmax;
HFBTHO.cpp:int HFBTHO::nhfbqx;
HFBTHO.cpp:int HFBTHO::nhfbx;
HFBTHO.cpp:// double rehfbcan, ehfb, retotpj, depnp, iproj, npr1pj, npr2pj;
HFBTHO.cpp:double HFBTHO::rehfbcan;
HFBTHO.cpp:double HFBTHO::ehfb;
HFBTHO.cpp://! hfbdiagonal
HFBTHO.cpp:// std::vector<double> erhfb, drhfb, erhfb1, drhfb1, evvk, evvkcan, zhfb;
HFBTHO.cpp:std::vector<double> HFBTHO::erhfb;
HFBTHO.cpp:std::vector<double> HFBTHO::drhfb;
HFBTHO.cpp:std::vector<double> HFBTHO::erhfb1;
HFBTHO.cpp:std::vector<double> HFBTHO::drhfb1;
HFBTHO.cpp:std::vector<double> HFBTHO::zhfb;
HFBTHO.cpp:// std::vector<std::vector<double>> hfb, hfbcan;
HFBTHO.cpp:// std::vector<std::vector<double>> HFBTHO::hfb;
HFBTHO.cpp:std::vector<double> HFBTHO::hfb;
HFBTHO.cpp:std::vector<std::vector<double>> HFBTHO::hfbcan;
HFBTHO_solver.cpp:    kindhfb = kindhfb_INI;
HFBTHO_solver.cpp:  rehfbcan = 0.0;
HFBTHO_solver.cpp:  nhfbx = ndx + ndx;
HFBTHO_solver.cpp:  nhfbqx = nhfbx * nhfbx;
HFBTHO_solver.cpp:            << std::setw(8) << std::left << nhfbx
HFBTHO_solver.cpp:            << std::setw(8) << std::left << nhfbqx
HFBTHO_solver.cpp:  //     ,ia,ikb,ipb,ka,kd,tb,txb,numax,ek,dk,vk,vk1,uk,vkmax,ddc,ddc1,hfb1,lcanon)
HFBTHO_solver.cpp:  //     ,ddc(ndx,nkx,2),ddc1(ndx,nkx,2),hfb1(nhfbx,2))
HFBTHO_solver.cpp:  //     ,ia,ikb,ipb,ka,kd,tb,txb,numax,ek,dk,vk,vk1,uk,vkmax,ddc,ddc1,hfb1,lcanon)
HFBTHO_solver.cpp:  hfb1.resize(nhfbx, std::vector<double>(2));
HFBTHO_solver.cpp:  // If(Allocated(erhfb)) Deallocate(erhfb,drhfb,erhfb1,drhfb1)
HFBTHO_solver.cpp:  // Allocate(erhfb(nkx),drhfb(nkx),erhfb1(nkx),drhfb1(nkx))
HFBTHO_solver.cpp:  // If(Allocated(hfb)) Deallocate(hfb,zhfb,evvk,hfbcan,evvkcan)
HFBTHO_solver.cpp:  // Allocate(hfb(ndx2,ndx2),zhfb(ndx2),evvk(ndx2),hfbcan(ndx,ndx),evvkcan(ndx))
HFBTHO_solver.cpp:  // If(Allocated(erhfb)) Deallocate(erhfb,drhfb,erhfb1,drhfb1)
HFBTHO_solver.cpp:  erhfb.resize(nkx);
HFBTHO_solver.cpp:  drhfb.resize(nkx);
HFBTHO_solver.cpp:  erhfb1.resize(nkx);
HFBTHO_solver.cpp:  drhfb1.resize(nkx);
HFBTHO_solver.cpp:  // If(Allocated(hfb)) Deallocate(hfb,zhfb,evvk,hfbcan,evvkcan)
HFBTHO_solver.cpp:  // hfb.resize(ndx2, std::vector<double>(ndx2));
HFBTHO_solver.cpp:  hfb.resize(ndx2 * ndx2);
HFBTHO_solver.cpp:  zhfb.resize(ndx2);
HFBTHO_solver.cpp:  hfbcan.resize(ndx, std::vector<double>(ndx));
HFBTHO_solver.cpp:  // ier=0; Call DSYEVD('V','L',ndx2,hfb,ndx2,evvk,ALWORK,-1,LWORK,-1,ier)
HFBTHO_solver.cpp:  // LAPACK_dsyevd("V", "L", &ndx2, hfb, &ndx2, evvk, alwork, &a, lwork, &b, &ier);
HFBTHO_solver.cpp:  LAPACK_dsyevd("V", "L", &ndx2, hfb, &ndx2, evvk, alwork, &a, lwork, &b, &ier);
main.cpp:    HFBTHO_solver hfbtho_solver;
main.cpp:    // int npr_INI[3], kindhfb_INI;
main.cpp:    int qqkindhfb_INI;
main.cpp:        thoRead >> qqkindhfb_INI >> qqinin_INI >> qqcdef_INI >> qqcqad_INI;
main.cpp:        // int npr_INI[3], kindhfb_INI;
main.cpp:        HFBTHO::kindhfb_INI = qqkindhfb_INI;
main.cpp:        hfbtho_solver.read_UNEDF_NAMELIST();
main.cpp:        hfbtho_solver.read_HFBTHO_NAMELIST();
main.cpp:        hfbtho_solver.printUNEDF();
main.cpp:        std::cout << HFBTHO::skyrme_INI << qqkindhfb_INI << qqinin_INI << qqcdef_INI << qqcqad_INI << std::endl;
main.cpp:        hfbtho_solver.printHFBTHO();
main.cpp:    hfbtho_solver.solver();
